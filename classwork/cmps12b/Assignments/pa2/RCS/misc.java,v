head	1.8;
access;
symbols;
locks;
comment	@# @;


1.8
date	2016.02.02.11.27.49;	author -;	state -;
branches;
next	1.7;

1.7
date	2013.10.12.02.24.18;	author -;	state -;
branches;
next	1.6;

1.6
date	2013.01.25.03.44.29;	author -;	state -;
branches;
next	1.5;

1.5
date	2013.01.25.03.42.58;	author -;	state -;
branches;
next	1.4;

1.4
date	2013.01.25.03.35.36;	author -;	state -;
branches;
next	1.3;

1.3
date	2013.01.25.03.34.37;	author -;	state -;
branches;
next	1.2;

1.2
date	2013.01.25.03.33.34;	author -;	state -;
branches;
next	1.1;

1.1
date	2013.01.25.03.22.48;	author -;	state -;
branches;
next	;


desc
@@


1.8
log
@-
@
text
@// $Id: misc.java,v 1.7 2013-10-11 19:24:18-07 - - $
// Michael Quan midquan
// Jourdyn Calhoun jacalhou

import static java.lang.System.*;

class misc {
   public static final int EXIT_SUCCESS = 0;
   public static final int EXIT_FAILURE = 1;
   public static final String program_name =
                 basename (getProperty ("java.class.path"));
   public static int exit_status = EXIT_SUCCESS;

   // constructor - prevents instantiation: only static fns.
   private misc() {
      throw new UnsupportedOperationException();
   }

   // basename - strips the dirname and returns the basename.
   //            See:  man -s 3c basename
   public static String basename (String pathname) {
      if (pathname == null || pathname.length() == 0) return ".";
      String[] paths = pathname.split ("/");
      return paths.length == 0 ? "." : paths[paths.length - 1];
   }

   // trace - print a trace message to stderr
   public static void trace (Object... args) {
      StackTraceElement elt =
                  Thread.currentThread().getStackTrace()[2];
      err.printf ("%s[%d]", elt.getMethodName(),
                  elt.getLineNumber());
      for (Object arg: args) err.printf (": %s", arg);
      err.printf ("%n");
   }

   // warn - print a warning and set exit status to failure.
   public static void warn (Object... args) {
      err.printf ("%s", program_name);
      for (Object arg: args) err.printf (": %s", arg);
      err.printf ("%n");
      exit_status = EXIT_FAILURE;
   }

   // die - print a warning and exit program.
   public static void die (Object... args) {
      warn (args);
      exit (exit_status);
   }

}
@


1.7
log
@-
@
text
@d1 3
a3 1
// $Id: misc.java,v 1.6 2013-01-24 19:44:29-08 - - $
@


1.6
log
@-
@
text
@d1 1
a1 1
// $Id: misc.java,v 1.5 2013-01-24 19:42:58-08 - - $
d12 1
a12 1
   // constructor - prevents instantiation: only static fns allowed.
d17 1
a17 1
   // basename - strips the dirname and returns only the basename.
d27 4
a30 2
      StackTraceElement elt = Thread.currentThread().getStackTrace()[2];
      err.printf ("%s[%d]", elt.getMethodName(), elt.getLineNumber());
@


1.5
log
@-
@
text
@d1 1
a1 1
// $Id: misc.java,v 1.4 2013-01-24 19:35:36-08 - - $
d28 1
a28 1
      err.printf ("%s[%d]", elt.getFileName(), elt.getLineNumber());
@


1.4
log
@-
@
text
@d1 1
a1 1
// $Id: misc.java,v 1.3 2013-01-24 19:34:37-08 - - $
d22 1
a22 4
      for (int index = paths.length - 1; index >= 0; --index) {
         if (paths[index].length() > 0) return paths[index];
      }
      return "/";
@


1.3
log
@-
@
text
@d1 1
a1 1
// $Id: misc.java,v 1.2 2013-01-24 19:33:34-08 - - $
d30 2
a31 4
      StackTraceElement trace
            = Thread.currentThread().getStackTrace()[2];
      err.printf ("%s[%d]: ", trace.getFileName(),
                              trace.getLineNumber());
@


1.2
log
@-
@
text
@d1 1
a1 1
// $Id: misc.java,v 1.1 2013-01-24 19:22:48-08 - - $
d32 1
a32 1
      err.printf ("%s[%d]: ", trace.getMethodName(),
a33 1
      err.printf ("%s", program_name);
@


1.1
log
@-
@
text
@d1 1
a1 1
// $Id: misc.java,v 1.1 2013-01-04 19:10:39-08 - - $
d20 1
a20 1
      if (pathname == null || pathname.length () == 0) return ".";
d23 1
a23 1
         if (paths[index].length () > 0) return paths[index];
d30 4
@
