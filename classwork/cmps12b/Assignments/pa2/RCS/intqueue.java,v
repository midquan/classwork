head	1.12;
access;
symbols;
locks;
comment	@# @;


1.12
date	2016.02.02.11.56.32;	author -;	state -;
branches;
next	1.11;

1.11
date	2016.02.02.11.26.22;	author -;	state -;
branches;
next	1.10;

1.10
date	2016.02.02.11.21.48;	author -;	state -;
branches;
next	1.9;

1.9
date	2016.02.02.11.06.17;	author -;	state -;
branches;
next	1.8;

1.8
date	2016.02.02.10.59.22;	author -;	state -;
branches;
next	1.7;

1.7
date	2016.02.02.10.52.31;	author -;	state -;
branches;
next	1.6;

1.6
date	2016.02.02.10.27.06;	author -;	state -;
branches;
next	1.5;

1.5
date	2016.02.02.07.11.32;	author -;	state -;
branches;
next	1.4;

1.4
date	2013.10.17.00.10.32;	author -;	state -;
branches;
next	1.3;

1.3
date	2013.01.25.03.44.29;	author -;	state -;
branches;
next	1.2;

1.2
date	2013.01.25.03.32.48;	author -;	state -;
branches;
next	1.1;

1.1
date	2013.01.25.03.22.48;	author -;	state -;
branches;
next	;


desc
@@


1.12
log
@-
@
text
@// $Id: intqueue.java,v 1.11 2016-02-02 03:26:22-08 - - $
// Michael Quan midquan 
// Jourdyn Calhoun jacalhou

import java.util.Iterator;
import java.util.NoSuchElementException;

class intqueue implements Iterable<Integer> {

   private class node {
      int linenr;
      node link;
   }
   private int count = 0;
   private node front = null;
   private node rear = null;

   public void insert (int number) {
      ++count;
      //FIXME
      //Pushes the node to insert new numbers 
      node new_node = new node();
      new_node.linenr = number;
      new_node.link = null;
      if(front == null){
         front = new_node;
         rear = front;
      }else{
         rear.link = new_node;
         rear = rear.link;
      }

   }

   public boolean empty() {
      return count == 0;
   }

   public int getcount() {
      return count;
   }

   public Iterator<Integer> iterator() {
      return new iterator();
   }

   private class iterator implements Iterator<Integer> {
      node curr = front;

      public boolean hasNext() {
         return curr != null;
      }

      public Integer next() {
         if (curr == null) throw new NoSuchElementException();
         Integer next = curr.linenr;
         curr = curr.link;
         return next;
      }

      public void remove() {
         throw new UnsupportedOperationException();
      }
   }

}

@


1.11
log
@-
@
text
@d1 1
a1 1
// $Id: intqueue.java,v 1.10 2016-02-02 03:21:48-08 - - $
d20 2
a21 1
      //FIXME 
@


1.10
log
@-
@
text
@d1 3
a3 1
// $Id: intqueue.java,v 1.9 2016-02-02 03:06:17-08 - - $
@


1.9
log
@-
@
text
@d1 1
a1 1
// $Id: intqueue.java,v 1.8 2016-02-02 02:59:22-08 - - $
a17 1
     // misc.trace (count);
@


1.8
log
@-
@
text
@d1 1
a1 1
// $Id: intqueue.java,v 1.7 2016-02-02 02:52:31-08 - - $
a22 1
      rear = new_node;
@


1.7
log
@-
@
text
@d1 1
a1 1
// $Id: intqueue.java,v 1.4 2013-10-16 17:10:32-07 - - $
d24 7
a30 1

@


1.6
log
@-
@
text
@d18 1
a18 1
      misc.trace (count);
a26 6

   public static void print (node head) {
      if (head == null) return;
      System.out.printf ("%s [%s] %s", head, head.getcount(), head.linenr);
      print (head.link);
   } 
@


1.5
log
@-
@
text
@d19 5
a23 1
      //FIXME
d27 6
@


1.4
log
@-
@
text
@d1 1
a1 1
// $Id: intqueue.java,v 1.3 2013-01-24 19:44:29-08 - - $
d20 2
@


1.3
log
@-
@
text
@d1 1
a1 1
// $Id: intqueue.java,v 1.2 2013-01-24 19:32:48-08 - - $
d19 1
@


1.2
log
@-
@
text
@d1 1
a1 1
// $Id: intqueue.java,v 1.1 2013-01-24 19:22:48-08 - - $
a7 3
   private int count = 0;
   private node front = null;
   private node rear = null;
d12 3
@


1.1
log
@-
@
text
@d1 1
a1 1
// $Id: intqueue.java,v 1.4 2012-01-19 19:43:07-08 - - $
d18 1
@
