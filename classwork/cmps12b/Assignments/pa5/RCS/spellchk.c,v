head	1.5;
access;
symbols;
locks;
comment	@ * @;


1.5
date	2016.03.12.13.38.01;	author -;	state -;
branches;
next	1.4;

1.4
date	2016.03.12.13.24.27;	author -;	state -;
branches;
next	1.3;

1.3
date	2016.03.12.12.01.11;	author -;	state -;
branches;
next	1.2;

1.2
date	2016.03.12.10.35.45;	author -;	state -;
branches;
next	1.1;

1.1
date	2016.03.12.10.13.22;	author -;	state -;
branches;
next	;


desc
@@


1.5
log
@-
@
text
@// $Id: spellchk.c,v 1.4 2016-03-12 05:24:27-08 - - $
// Michael Quan midquan

#include <errno.h>
#include <libgen.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <assert.h>
#include <unistd.h>
#include <ctype.h>

#include "debug.h"
#include "hashset.h"
#include "yyextern.h"

#define STDIN_NAME       "-"
#define DEFAULT_DICTNAME \
        "/afs/cats.ucsc.edu/courses/cmps012b-wm/usr/dict/words"
#define DEFAULT_DICT_POS 0
#define EXTRA_DICT_POS   1
#define NUMBER_DICTS     2

void print_error (const char *object, const char *message) {
   fflush (NULL);
   fprintf (stderr, "%s: %s: %s\n", program_name, object, message);
   fflush (NULL);
   exit_status = EXIT_FAILURE;
}

FILE *open_infile (const char *filename) {
   FILE *file = fopen (filename, "r");
   if (file == NULL){
      print_error (filename, strerror (errno));
      exit_status = 2;
   }
   DEBUGF ('m', "filename = \"%s\", file = 0x%p\n", filename, file);
   return file;
}

void spellcheck (const char *filename, hashset *hashset) {
   yylineno = 1;
   DEBUGF ('m', "filename = \"%s\", hashset = 0x%p\n",
                filename, hashset);
   for (;;) {
      int token = yylex ();
      if (token == 0) break;
      if(!has_hashset(hashset, yytext)) {
         char *lower = strdup(yytext);
         assert(lower != NULL);
         for(int index = 0; lower[index] != '\0'; index++){
            lower[index] = tolower(lower[index]);
         }
         if(!has_hashset(hashset, lower)) {
            printf("%s: %d: %s\n", filename, yylineno, yytext);
            exit_status = 1;
         }
         free(lower);
      }
   }
}

void load_dictionary (const char *dictionary_name, hashset *hashset) {
   if (dictionary_name == NULL) return;
   DEBUGF ('m', "dictionary_name = \"%s\", hashset = %p\n",
           dictionary_name, hashset);
   FILE *dict = open_infile(dictionary_name);
   if(dict == NULL) return;
   char buff[1024];
   for(;;) {
      char *line = fgets(buff, sizeof buff, dict);
      if (line == NULL) break;
      line = strchr(buff, '\n');
      if (line == NULL) {
         print_error(dictionary_name, "unterminated line");
         exit_status = 2;
      } else {
         *line = '\0';
      }
      line = strdup(buff);
      assert(line != NULL);
      put_hashset(hashset, line);
      free(line);

   }
   fclose(dict);
}


void scan_options (int argc, char** argv,
                   char **default_dictionary,
                   char **user_dictionary) {
   // Scan the arguments and set flags.
   opterr = false;
   for (;;) {
      int option = getopt (argc, argv, "nxyd:@@:");
      if (option == EOF) break;
      switch (option) {
         char optopt_string[16]; // used in default:
         case 'd': *user_dictionary = optarg;
                   break;
         case 'n': *default_dictionary = NULL;
                   break;
         case 'x': STUBPRINTF ("-x\n");
                   break;
         case 'y': yy_flex_debug = true;
                   break;
         case '@@': set_debug_flags (optarg);
                   if (strpbrk (optarg, "@@y")) yy_flex_debug = true;
                   break;
         default : sprintf (optopt_string, "-%c", optopt);
                   print_error (optopt_string, "invalid option");
                   break;
      }
   }
}


int main (int argc, char **argv) {
   program_name = basename (argv[0]);
   char *default_dictionary = DEFAULT_DICTNAME;
   char *user_dictionary = NULL;
   hashset *hashset = new_hashset ();
   yy_flex_debug = false;
   scan_options (argc, argv, &default_dictionary, &user_dictionary);
   if(default_dictionary == NULL && user_dictionary == NULL){
      print_error(default_dictionary, "no dictionaries");
   }
   // Load the dictionaries into the hash table.
   load_dictionary (default_dictionary, hashset);
   load_dictionary (user_dictionary, hashset);

   // Read and do spell checking on each of the files.
   if (optind >= argc) {
      yyin = stdin;
      spellcheck (STDIN_NAME, hashset);
   }else {
      for (int fileix = optind; fileix < argc; ++fileix) {
         DEBUGF ('m', "argv[%d] = \"%s\"\n", fileix, argv[fileix]);
         char *filename = argv[fileix];
         if (strcmp (filename, STDIN_NAME) == 0) {
            yyin = stdin;
            spellcheck (STDIN_NAME, hashset);
         }else {
            yyin = open_infile (filename);
            if (yyin == NULL) continue;
            spellcheck (filename, hashset);
            fclose (yyin);
         }
      }
   }
   
   yylex_destroy ();
   return exit_status;
}

@


1.4
log
@-
@
text
@d1 2
a2 1
// $Id: spellchk.c,v 1.3 2016-03-12 04:01:11-08 - - $
a48 2
      // DEBUGF ('m', "line %d, yytext = \"%s\"\n", yylineno, yytext);
      //STUBPRINTF ("%s: %d: %s\n", filename, yylineno, yytext);
d56 1
a56 1
            printf("misspelled word; %s\n", yytext);
a87 1
   //STUBPRINTF ("Open dictionary, load it, close it\n");
@


1.3
log
@-
@
text
@d1 1
a1 1
// $Id: spellchk.c,v 1.2 2016-03-12 02:35:45-08 - - $
d10 2
d48 14
a61 2
      DEBUGF ('m', "line %d, yytext = \"%s\"\n", yylineno, yytext);
      STUBPRINTF ("%s: %d: %s\n", filename, yylineno, yytext);
a86 1
      if(overload_hashset(hashset)) double_hashset(hashset);
@


1.2
log
@-
@
text
@d1 1
a1 1
// $Id: spellchk.c,v 1.1 2016-03-12 02:13:22-08 - - $
d9 1
d75 1
a75 1
   fclose(input);
@


1.1
log
@-
@
text
@d1 1
a1 1
// $Id: spellchk.c,v 1.9 2014-05-15 21:07:47-07 - - $
d30 4
a33 1
   if (file == NULL) print_error (filename, strerror (errno));
d58 1
a58 1
      char *line = fgets(buffer, sizeof buffer, input);
@
