head	1.22;
access;
symbols;
locks;
comment	@# @;


1.22
date	2013.10.12.02.19.01;	author -;	state -;
branches;
next	1.21;

1.21
date	2013.09.25.23.35.37;	author -;	state -;
branches;
next	1.20;

1.20
date	2013.09.25.23.33.50;	author -;	state -;
branches;
next	1.19;

1.19
date	2013.09.25.23.33.06;	author -;	state -;
branches;
next	1.18;

1.18
date	2013.09.25.23.30.29;	author -;	state -;
branches;
next	1.17;

1.17
date	2013.09.25.22.51.16;	author -;	state -;
branches;
next	1.16;

1.16
date	2013.04.12.00.33.32;	author -;	state -;
branches;
next	1.15;

1.15
date	2013.04.12.00.29.48;	author -;	state -;
branches;
next	1.14;

1.14
date	2013.04.12.00.26.05;	author -;	state -;
branches;
next	1.13;

1.13
date	2013.04.12.00.25.50;	author -;	state -;
branches;
next	1.12;

1.12
date	2013.04.12.00.15.52;	author -;	state -;
branches;
next	1.11;

1.11
date	2013.04.12.00.13.24;	author -;	state -;
branches;
next	1.10;

1.10
date	2013.04.12.00.13.15;	author -;	state -;
branches;
next	1.9;

1.9
date	2013.04.12.00.12.57;	author -;	state -;
branches;
next	1.8;

1.8
date	2013.04.12.00.09.37;	author -;	state -;
branches;
next	1.7;

1.7
date	2013.04.12.00.06.38;	author -;	state -;
branches;
next	1.6;

1.6
date	2013.04.11.23.45.18;	author -;	state -;
branches;
next	1.5;

1.5
date	2013.01.25.00.10.59;	author -;	state -;
branches;
next	1.4;

1.4
date	2013.01.25.00.10.03;	author -;	state -;
branches;
next	1.3;

1.3
date	2013.01.25.00.03.14;	author -;	state -;
branches;
next	1.2;

1.2
date	2013.01.25.00.03.03;	author -;	state -;
branches;
next	1.1;

1.1
date	2013.01.18.02.48.48;	author -;	state -;
branches;
next	;


desc
@@


1.22
log
@-
@
text
@// $Id: jrpn.java,v 1.21 2013-09-25 16:35:37-07 - - $

import java.util.Scanner;
import static java.lang.System.*;

class jrpn {
   static int exit_status = 0;
   static final int EMPTY = -1;
   static final int SIZE = 16;
   static class stack_t {
      int top = EMPTY;
      double[] numbers = new double[SIZE];
   }

   static void error (String format, Object... args) {
      out.flush();
      err.printf (format, args);
      err.flush();
      exit_status = 1;
   }

   static void bad_operator (String oper) {
      error ("\"%s\": invalid operator%n", oper);
   }

   static void push (stack_t stack, double number) {
      if (stack.top >= SIZE - 1) {
         out.printf ("%s: stack overflow%n", number);
      }else {
         stack.numbers[++stack.top] = number;
      }
   }

   static void do_binop (stack_t stack, char oper) {
      if (stack.top < 1) {
         out.printf ("'%s': stack underflow", oper);
      }else {
         double right = stack.numbers[stack.top--];
         double left = stack.numbers[stack.top--];
         switch (oper) {
            case '+': push (stack, left + right); break;
            case '-': push (stack, left - right); break;
            case '*': push (stack, left * right); break;
            case '/': push (stack, left / right); break;
         }
      }
   }


   static void do_print (stack_t stack) {
      if (stack.top == EMPTY) {
         out.printf ("stack is empty%n");
      }else {
         for (int pos = 0; pos <= stack.top; ++pos) {
            out.printf ("%s%n", stack.numbers[pos]);
         }
      }
   }

   static void do_clear (stack_t stack) {
      stack.top = EMPTY;
   }

   static void do_operator (stack_t stack, String oper) {
      switch (oper.charAt(0)) {
         case '+': do_binop (stack, '+'); break;
         case '-': do_binop (stack, '-'); break;
         case '*': do_binop (stack, '*'); break;
         case '/': do_binop (stack, '/'); break;
         case ';': do_print (stack);      break;
         case '@@': do_clear (stack);      break;
         default : bad_operator (oper);   break;
      }
   }

   static String argv_0() {
      String jarname = getProperty ("java.class.path");
      if (jarname.equals (".")) jarname = "jrpn";
      return jarname.substring (jarname.lastIndexOf ("/") + 1);
   }


   public static void main (String[] args) {
      if (args.length != 0) {
         err.printf ("Usage: %s%n", argv_0());
         exit (1);
      }
      Scanner stdin = new Scanner (in);
      stack_t stack = new stack_t();
      while (stdin.hasNext()) {
         String token = stdin.next();
         if (token.startsWith("#")) {
            stdin.nextLine();
            continue;
         }
         try {
            double number = Double.parseDouble (token);
            push (stack, number);
         }catch (NumberFormatException error) {
            if (token.length() != 1) {
               bad_operator (token);
            }else {
               do_operator (stack, token);
            }
         }
      }
      exit (exit_status);
   }
}
@


1.21
log
@-
@
text
@d1 1
a1 1
// $Id: jrpn.java,v 1.20 2013-09-25 16:33:50-07 - - $
d49 1
a59 1

d82 1
@


1.20
log
@-
@
text
@d1 1
a1 1
// $Id: jrpn.java,v 1.19 2013-09-25 16:33:06-07 - - $
d28 1
a28 1
         out.printf ("%s: stack overflow", number);
@


1.19
log
@-
@
text
@d1 1
a1 1
// $Id: jrpn.java,v 1.17 2013-09-25 15:51:16-07 - - $
d59 1
a63 1

@


1.18
log
@-
@
text
@d22 4
d28 1
a28 1
         error ("%s: stack overflow%n", number);
d70 3
a72 3
         case ';': do_print (stack); break;
         case '@@': do_clear (stack); break;
         default : error ("\"%s\": invalid operator%n", oper); break;
@


1.17
log
@-
@
text
@d1 1
a1 1
// $Id: jrpn.java,v 1.16 2013-04-11 17:33:32-07 - - $
d7 1
d15 1
a15 1
   static void bad_operator (String oper) {
d17 1
a17 1
      err.printf ("\"%s\": invalid operator%n", oper);
d19 1
d24 1
a24 1
         out.printf ("%s: stack overflow", number);
d66 3
a68 3
         case ';': do_print (stack);      break;
         case '@@': do_clear (stack);      break;
         default : bad_operator (oper);   break;
d102 1
@


1.16
log
@-
@
text
@d1 1
a1 1
// $Id: jrpn.java,v 1.15 2013-04-11 17:29:48-07 - - $
d15 3
a17 1
      out.printf ("\"%s\": invalid operator%n", oper);
@


1.15
log
@-
@
text
@d1 1
a1 1
// $Id: jrpn.java,v 1.14 2013-04-11 17:26:05-07 - - $
d70 1
a70 1
      out.printf ("java.class.path=%s%n", jarname);
@


1.14
log
@-
@
text
@d1 1
a1 1
// $Id: jrpn.java,v 1.13 2013-04-11 17:25:50-07 - - $
d70 1
a70 2
      ClassLoader.setDefaultAssertionStatus (true);
      assert ! jarname.equals (".");
@


1.13
log
@-
@
text
@d1 1
a1 1
// $Id: jrpn.java,v 1.12 2013-04-11 17:15:52-07 - - $
d70 1
a70 1
      setDefaultAssertionStatus (true);
@


1.12
log
@-
@
text
@d1 1
a1 1
// $Id: jrpn.java,v 1.11 2013-04-11 17:13:24-07 - - $
d70 2
a71 1
      assert ! jarname.equals ("."): "program not in jar file";
@


1.11
log
@-
@
text
@d1 1
a1 1
// $Id: jrpn.java,v 1.10 2013-04-11 17:13:15-07 - - $
d70 1
@


1.10
log
@-
@
text
@d1 1
a1 1
// $Id: jrpn.java,v 1.9 2013-04-11 17:12:57-07 - - $
d68 1
a68 1
   String argv_0() {
@


1.9
log
@-
@
text
@d1 1
a1 1
// $Id: jrpn.java,v 1.8 2013-04-11 17:09:37-07 - - $
d68 1
a68 1
   String argv_0 () {
d75 1
a75 1
         err.printf ("Usage: %s%n", argv_0);
@


1.8
log
@-
@
text
@d1 1
a1 1
// $Id: jrpn.java,v 1.7 2013-04-11 17:06:38-07 - - $
d68 5
d75 1
a75 1
         err.printf ("Usage: jrpn%s");
@


1.7
log
@-
@
text
@d1 1
a1 1
// $Id: jrpn.java,v 1.6 2013-04-11 16:45:18-07 - - $
d15 1
a15 1
      out.println (oper + ": invalid operator");
d20 1
a20 1
         out.println (number + ": stack overflow");
d28 1
a28 1
         out.println (oper + ": stack underflow");
d43 1
a43 1
         out.println ("stack is empty");
d46 1
a46 1
            out.println (stack.numbers[pos]);
d70 1
a70 1
         err.println ("Usage: jrpn");
d77 1
a77 1
         if (oper.startsWith("#")) {
@


1.6
log
@-
@
text
@d1 1
a1 1
// $Id: jrpn.java,v 1.5 2013-01-24 16:10:59-08 - - $
d75 8
a82 3
      for (;;) {
         if (stdin.hasNextDouble()) {
            double number = stdin.nextDouble();
d84 3
a86 6
         }else if (stdin.hasNext()) {
            String oper = stdin.next();
            if (oper.startsWith("#")) {
               stdin.nextLine();
            }else if (oper.length() != 1) {
               bad_operator (oper);
d88 1
a88 1
               do_operator (stack, oper);
a89 2
         }else {
            break;
@


1.5
log
@-
@
text
@d1 1
a1 1
// $Id: jrpn.java,v 1.3 2013/01/25 00:03:14 - - $
d14 2
a15 2
   static void err_operator (String operator) {
      out.println (operator + ": invalid operator");
d26 1
a26 1
   static void do_binop (stack_t stack, char operator) {
d28 1
a28 1
         out.println (operator + ": stack underflow");
d32 1
a32 1
         switch (operator) {
d56 9
a64 9
   static void do_operator (stack_t stack, String operator) {
      switch (operator.charAt(0)) {
         case '+': do_binop (stack, '+');   break;
         case '-': do_binop (stack, '-');   break;
         case '*': do_binop (stack, '*');   break;
         case '/': do_binop (stack, '/');   break;
         case ';': do_print (stack);        break;
         case '@@': do_clear (stack);        break;
         default : err_operator (operator); break;
d80 2
a81 2
            String operator = stdin.next();
            if (operator.startsWith("#")) {
d83 2
a84 2
            }else if (operator.length() != 1) {
               err_operator (operator);
d86 1
a86 1
               do_operator (stack, operator);
@


1.4
log
@-
@
text
@d1 1
a1 1
// $Id: jrpn.java,v 1.3 2013-01-24 16:03:14-08 - - $
d15 1
a15 1
      out.printf ("%s: invalid operator%n", operator);
d20 1
a20 1
         out.printf ("%.15g: stack overflow%n", number);
d28 1
a28 1
         out.printf ("%c: stack underflow%n", operator);
d43 1
a43 1
         out.printf ("stack is empty%n");
d46 1
a46 1
            out.printf ("%.15g%n", stack.numbers[pos]);
d70 1
a70 1
         err.printf ("Usage: jrpn%n");
@


1.3
log
@-
@
text
@d1 1
a1 1
// $Id: jrpn.java,v 1.2 2013-01-24 16:03:03-08 - - $
d15 1
a15 1
      out.println (operator + ": invalid operator");
d20 1
a20 1
         out.println (number + ": stack overflow");
d28 1
a28 1
         out.println (operator + ": stack underflow");
d46 1
a46 1
            out.println (stack.numbers[pos]);
d70 1
a70 1
         err.printf ("Usage: jrpn\n");
@


1.2
log
@-
@
text
@d1 1
a1 1
// $Id: jrpn.java,v 1.1 2013-01-17 18:48:48-08 - - $
d71 1
a71 1
         exit (EXIT_FAILURE);
@


1.1
log
@-
@
text
@d1 1
a1 1
// $Id: jrpn.java,v 1.11 2013-01-17 16:36:03-08 - - $
d69 4
@
