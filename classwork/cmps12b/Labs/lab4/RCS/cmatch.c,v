head	1.30;
access;
symbols;
locks;
comment	@ * @;


1.30
date	2016.02.09.05.26.26;	author -;	state -;
branches;
next	1.29;

1.29
date	2016.02.09.03.53.05;	author -;	state -;
branches;
next	1.28;

1.28
date	2016.02.09.03.40.26;	author -;	state -;
branches;
next	1.27;

1.27
date	2016.02.09.03.39.29;	author -;	state -;
branches;
next	1.26;

1.26
date	2016.02.09.03.30.33;	author -;	state -;
branches;
next	1.25;

1.25
date	2016.02.09.03.28.49;	author -;	state -;
branches;
next	1.24;

1.24
date	2016.02.09.03.18.28;	author -;	state -;
branches;
next	1.23;

1.23
date	2016.02.09.03.16.24;	author -;	state -;
branches;
next	1.22;

1.22
date	2016.02.09.03.15.10;	author -;	state -;
branches;
next	1.21;

1.21
date	2016.02.09.03.14.38;	author -;	state -;
branches;
next	1.20;

1.20
date	2016.02.09.03.14.05;	author -;	state -;
branches;
next	1.19;

1.19
date	2016.02.09.03.12.21;	author -;	state -;
branches;
next	1.18;

1.18
date	2016.02.09.03.08.04;	author -;	state -;
branches;
next	1.17;

1.17
date	2016.02.09.03.04.07;	author -;	state -;
branches;
next	1.16;

1.16
date	2016.02.09.02.52.33;	author -;	state -;
branches;
next	1.15;

1.15
date	2016.02.09.02.50.47;	author -;	state -;
branches;
next	1.14;

1.14
date	2016.02.09.02.47.07;	author -;	state -;
branches;
next	1.13;

1.13
date	2016.02.09.02.45.09;	author -;	state -;
branches;
next	1.12;

1.12
date	2016.02.09.02.34.38;	author -;	state -;
branches;
next	1.11;

1.11
date	2016.02.09.02.33.07;	author -;	state -;
branches;
next	1.10;

1.10
date	2016.02.09.02.31.06;	author -;	state -;
branches;
next	1.9;

1.9
date	2016.02.09.02.30.27;	author -;	state -;
branches;
next	1.8;

1.8
date	2016.02.09.02.26.30;	author -;	state -;
branches;
next	1.7;

1.7
date	2016.02.09.02.25.39;	author -;	state -;
branches;
next	1.6;

1.6
date	2016.02.09.01.29.47;	author -;	state -;
branches;
next	1.5;

1.5
date	2016.02.09.01.27.38;	author -;	state -;
branches;
next	1.4;

1.4
date	2016.02.09.01.26.49;	author -;	state -;
branches;
next	1.3;

1.3
date	2016.02.09.01.15.30;	author -;	state -;
branches;
next	1.2;

1.2
date	2016.02.09.01.13.23;	author -;	state -;
branches;
next	1.1;

1.1
date	2016.02.09.00.49.24;	author -;	state -;
branches;
next	;


desc
@@


1.30
log
@-
@
text
@// $Id: cmatch.c,v 1.29 2016-02-08 19:53:05-08 - - $
//
// NAME Michael Quan midquan
//
//    cmatch - print matching lines from files 
//
// SYNOPSIS
//    cmatch [-iln] string [filename...]
//
// DESCRIPTION
//    Searches the named input files for lines containing string
//    By default, matching lines are printed.
//    If more than one file is specified, lines of output are
//    preceded by the filename.

#define _GNU_SOURCE
#include <errno.h>
#include <libgen.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <stdbool.h>
#include <unistd.h>


char *program_name = NULL;
int exit_status = EXIT_SUCCESS;
int file_count = 0;
#define STDIN_NAME "-"

typedef struct options {
   bool ignore_case;
   bool filenames_only;
   bool number_lines;
} options;

void scan_options (int argc, char **argv, options *opts) {
   opts->ignore_case = false;
   opts->filenames_only = false;
   opts->number_lines = false;
   opterr = false;
   for (;;) {
      int opt = getopt (argc, argv, "iln");
      if (opt == EOF) break;
      switch (opt) {
         case 'i':
            opts->ignore_case = true;
            break;
         case 'l':
            opts->filenames_only = true;
            break;
         case 'n':
            opts->number_lines = true;
            break;
         default:
            exit_status = EXIT_FAILURE;
            fflush (NULL);
            fprintf (stderr, "%s: -%c: invalid option\n",
                             program_name, optopt);
            break;
      }
   }
}


const char *strbool (bool value) {
   return value ? "true" : "false";
}

void catbyline(FILE *input, char *filename,char *target,options *opts){
   char buffer[1024];
   for (int linenr = 1;; ++linenr) {
      char *buf = fgets (buffer, sizeof buffer, input);
      if (buf == NULL) break;
      if(opts->ignore_case){
         if(strcasestr(buf, target)!= NULL){
            if(opts->filenames_only){
               printf("%s \n", filename);
               break;
            }else{
               if(opts->number_lines){
                  if(file_count > 1){
                     printf("%s:%d: %s", filename, linenr, buf); 
                  }else {
                     printf("%d: %s", linenr, buf);
                  }
               }
               else{
                  if(file_count > 1){
                     printf("%s:%s",filename, buf); 
                  }else{
                      printf("%s",buf);
                  }  
           
               }
            }
         }
      }else{
         if(strstr(buf, target) != NULL){
            if(opts->filenames_only){
               printf("%s", filename);
               break;
            }else{
               if(opts->number_lines){
                  if(file_count > 1){
                     printf("%s:%d: %s", filename, linenr, buf);
                  }else{
                      printf("%d: %s", linenr, buf);
                  }
               }else{
                  if(file_count > 1){
                     printf("%s:%s",filename, buf);
                  }else{ 
                     printf("%s",buf);
                  }
               }
            }
         }
            
      }
   }
}

int main (int argc, char **argv) {
   program_name = basename (argv[0]);
   options opts;
   scan_options(argc, argv, &opts);
   
   if (argc == 1) {
      exit_status = EXIT_FAILURE;
      fflush (NULL);
      fprintf(stderr, "Usage: %s [-iln] string  [filename...] \n"
         , program_name);
      fflush (NULL);
   }else {
      file_count = argc - (optind + 1);
      for (int argi = optind +1; argi < argc; ++argi) {
         char *target = argv[optind];
         char *filename = argv[argi];
         if (strcmp (filename, STDIN_NAME) == 0) {
            catbyline (stdin, STDIN_NAME,target,&opts);
         }else {
            FILE *input = fopen (filename, "r");
            if (input != NULL) {
               catbyline (input, filename,target,&opts);
               fclose (input);
            }else {
               exit_status = EXIT_FAILURE;
               fflush (NULL);
               fprintf (stderr, "%s: %s: %s\n", program_name,
                        filename, strerror (errno));
               fflush (NULL);
            }
         }
      }
   }
   return exit_status;
}
@


1.29
log
@-
@
text
@d1 1
a1 1
// $Id: cmatch.c,v 1.28 2016-02-08 19:40:26-08 - - $
d132 1
a132 1
      fprintf(stderr, "Usage: %s [iln] string  [filename...] \n"
@


1.28
log
@-
@
text
@d1 3
a3 2
// $Id: cmatch.c,v 1.27 2016-02-08 19:39:29-08 - - $

a4 1
// NAME
@


1.27
log
@-
@
text
@d1 1
a1 1
// $Id: cmatch.c,v 1.26 2016-02-08 19:30:33-08 - - $
a158 4
//TEST// cal 9 1752 >cal.1752.09; cal 4 2013 >cal.2013.04
//TEST// catbyline cal.1752.09 cal.2013.04 >catbyline.out
//TEST// mkpspdf catbyline.ps catbyline.c* catbyline.out*

@


1.26
log
@-
@
text
@d1 1
a1 1
// $Id: cmatch.c,v 1.25 2016-02-08 19:28:49-08 - - $
d70 1
a70 1
void catbyline (FILE *input, char *filename, char*target, options*opts) {
@


1.25
log
@-
@
text
@d1 1
a1 1
// $Id: cmatch.c,v 1.24 2016-02-08 19:18:28-08 - - $
d82 1
a82 1
                  if(file_count > 0){
d89 1
a89 1
                  if(file_count > 0){
d105 1
a105 1
                  if(file_count > 0){
d111 1
a111 1
                  if(file_count > 0){
@


1.24
log
@-
@
text
@d1 1
a1 1
// $Id: cmatch.c,v 1.23 2016-02-08 19:16:24-08 - - $
a71 1
   //printf ("FILE %s:\n", filename);
a119 1
      //printf ("%6d: %s", linenr, buf);
@


1.23
log
@-
@
text
@d1 1
a1 1
// $Id: cmatch.c,v 1.22 2016-02-08 19:15:10-08 - - $
d84 1
a84 1
                     printf("%s: %d: %s", filename, linenr, buf); 
d91 1
a91 1
                     printf("%s: %s",filename, buf); 
d107 1
a107 1
                     printf("%s: %d: %s", filename, linenr, buf);
d113 1
a113 1
                     printf("%s: %s",filename, buf);
@


1.22
log
@-
@
text
@d1 1
a1 1
// $Id: cmatch.c,v 1.21 2016-02-08 19:14:38-08 - - $
d84 2
a85 2
                     printf("%s: %d: %s", filename, liner, buf); 
                  else {
d107 1
a107 1
                     printf("%s: %d: %s", filename, liner, buf);
@


1.21
log
@-
@
text
@d1 1
a1 1
// $Id: cmatch.c,v 1.20 2016-02-08 19:14:05-08 - - $
d89 1
a89 1
               else
d95 3
a97 1
           }
@


1.20
log
@-
@
text
@d1 1
a1 1
// $Id: cmatch.c,v 1.19 2016-02-08 19:12:21-08 - - $
d85 3
a87 1
                  else printf("%d: %s", linenr, buf);
@


1.19
log
@-
@
text
@d1 1
a1 1
// $Id: cmatch.c,v 1.18 2016-02-08 19:08:04-08 - - $
d90 3
a92 1
                  }else printf("%s",buf);  
d104 4
a107 2
                  }else printf("%d: %s", linenr, buf);
               }else
d110 4
a113 1
                  }else printf("%s",buf);
@


1.18
log
@-
@
text
@d1 1
a1 1
// $Id: cmatch.c,v 1.17 2016-02-08 19:04:07-08 - - $
d83 2
a84 1
                  if(file_name > 0)printf("%s: %d: %s"); 
d87 4
a90 1
               else printf("%s",buf);  
d100 7
a106 2
                  printf("%d: %s", linenr, buf);
               }else printf("%s",buf);
@


1.17
log
@-
@
text
@d1 1
a1 1
// $Id: cmatch.c,v 1.16 2016-02-08 18:52:33-08 - - $
d28 1
d83 2
a84 1
                  printf("%d: %s", linenr, buf);
d118 1
a118 2
      if(argc > optind +2){
         int mf = 1
@


1.16
log
@-
@
text
@d1 1
a1 1
// $Id: cmatch.c,v 1.15 2016-02-08 18:50:47-08 - - $
d42 1
a42 1
      int opt = getopt (argc, argv, "ilm");
d108 1
d116 2
@


1.15
log
@-
@
text
@d1 1
a1 1
// $Id: cmatch.c,v 1.14 2016-02-08 18:47:07-08 - - $
d51 1
a51 1
         case 'm':
@


1.14
log
@-
@
text
@d1 1
a1 1
// $Id: cmatch.c,v 1.13 2016-02-08 18:45:09-08 - - $
d78 1
a78 1
               printf("%s", filename);
d115 1
a115 1
      for (int argi = 1; argi < argc; ++argi) {
@


1.13
log
@-
@
text
@d1 1
a1 1
// $Id: cmatch.c,v 1.12 2016-02-08 18:34:38-08 - - $
d71 1
a71 1
   printf ("FILE %s:\n", filename);
@


1.12
log
@-
@
text
@d1 1
a1 1
// $Id: cmatch.c,v 1.11 2016-02-08 18:33:07-08 - - $
d100 1
a102 1

a136 1

@


1.11
log
@-
@
text
@d1 1
a1 1
// $Id: cmatch.c,v 1.10 2016-02-08 18:31:06-08 - - $
d119 1
a119 1
            catbyline (stdin, STDIN_NAME);
d123 1
a123 1
               catbyline (input, filename);
@


1.10
log
@-
@
text
@d1 1
a1 1
// $Id: cmatch.c,v 1.9 2016-02-08 18:30:27-08 - - $
d113 1
@


1.9
log
@-
@
text
@d1 1
a1 1
// $Id: cmatch.c,v 1.8 2016-02-08 18:26:30-08 - - $
d82 1
a82 1
                  printf("%d: %s", liner, buf);
d94 1
a94 1
                  printf("%d: %s", liner, buf);
@


1.8
log
@-
@
text
@d1 1
a1 1
// $Id: cmatch.c,v 1.7 2016-02-08 18:25:39-08 - - $
d76 1
a76 1
         if(strcasestr(buf, target)){
d81 1
a81 1
               if(opts->opts.number_lines){
d88 1
a88 1
         if(strstr(buf, target)){
d92 4
d98 1
@


1.7
log
@-
@
text
@d1 1
a1 1
// $Id: cmatch.c,v 1.6 2016-02-08 17:29:47-08 - - $
d76 1
a76 1
         if(strcasestr(buf, target){
d88 1
a88 1
         if(strstr(buf, target){
@


1.6
log
@-
@
text
@d1 1
a1 1
// $Id: cmatch.c,v 1.5 2016-02-08 17:27:38-08 - - $
d16 1
d69 1
a69 1
void catbyline (FILE *input, char *filename) {
d75 20
a94 1
      printf ("%6d: %s", linenr, buf);
d104 4
a107 4
   exit_status = EXIT_FAILURE;
   fflush (NULL);
   fprintf(stderr, "Usage: %s [iln] string  [filename...] \n"
      , program_name);
@


1.5
log
@-
@
text
@d1 1
a1 1
// $Id: cmatch.c,v 1.4 2016-02-08 17:26:49-08 - - $
d86 2
a87 3
   fprintf(stderr, "Usage: %s [iln] string 
      [filename...] \n", program_name);
   fflush (NULL); 
@


1.4
log
@-
@
text
@d1 1
a1 1
// $Id: cmatch.c,v 1.3 2016-02-08 17:15:30-08 - - $
d86 2
a87 1
   fprintf(stderr, "Usage: %s [iln] string [filename...] \n", program_name)
@


1.3
log
@-
@
text
@d1 1
a1 1
// $Id: cmatch.c,v 1.2 2016-02-08 17:13:23-08 - - $
d84 4
a87 2
   fprintf(stderr, "Usage: %s [iln] string [filename...] \n", program_name);   
   //catbyline (stdin, STDIN_NAME);
d90 1
@


1.2
log
@-
@
text
@d1 1
a1 1
// $Id: cmatch.c,v 1.1 2016-02-08 16:49:24-08 - - $
d81 1
a86 1
      getopt
@


1.1
log
@-
@
text
@d1 1
a1 1
// $Id: $
d81 1
d83 2
a84 1
      catbyline (stdin, STDIN_NAME);
d86 1
@
