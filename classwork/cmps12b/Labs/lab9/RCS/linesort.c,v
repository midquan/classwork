head	1.7;
access;
symbols;
locks;
comment	@ * @;


1.7
date	2016.03.10.13.45.31;	author -;	state -;
branches;
next	1.6;

1.6
date	2016.03.10.13.28.59;	author -;	state -;
branches;
next	1.5;

1.5
date	2016.03.10.12.18.58;	author -;	state -;
branches;
next	1.4;

1.4
date	2016.03.10.12.04.50;	author -;	state -;
branches;
next	1.3;

1.3
date	2016.03.10.11.44.52;	author -;	state -;
branches;
next	1.2;

1.2
date	2016.03.10.11.29.13;	author -;	state -;
branches;
next	1.1;

1.1
date	2016.03.10.11.04.57;	author -;	state -;
branches;
next	;


desc
@@


1.7
log
@-
@
text
@// $Id: linesort.c,v 1.6 2016-03-10 05:28:59-08 - - $
// Michael Quan miduqan

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <libgen.h>
#include <assert.h>

#include "inssort.h"

char *program_name = NULL;
int exit_status = EXIT_SUCCESS;

int cmpfunc(const void *this, const void *that) {

   char **thisstr = (char**) this;
   char **thatstr = (char**) that;
   return strcmp(*thisstr, *thatstr);
}

int main(int argc, char **argv){
   (void) argc;
   program_name = basename(argv[0]);

   char *array[0x1000];
   char buffer[0x1000];
   size_t linenr = 1;
   for(;;linenr++){
      char *linepos = fgets(buffer, sizeof buffer, stdin); 
      if (linepos == NULL) break;
      if (linenr - 1 > 0x1000) break;
      linepos = strchr (buffer, '\n');
      *linepos = '\0';
      linepos = strdup(buffer);
      assert (linepos != NULL);
      array[linenr - 1] = linepos;
   }

   inssort(array, linenr - 1, sizeof *array, cmpfunc);
   for(size_t index = 0; index < linenr - 1; index++){
      printf("%s\n", array[index]);
      free(array[index]);
   }

   return exit_status;
}
@


1.6
log
@-
@
text
@d1 1
a1 1
// $Id: linesort.c,v 1.5 2016-03-10 04:18:58-08 - - $
d34 1
d36 1
@


1.5
log
@-
@
text
@d1 1
a1 1
// $Id: linesort.c,v 1.4 2016-03-10 04:04:50-08 - - $
d6 3
d15 1
a15 1
int strstrcmp(const void *this, const void *that) {
d27 1
d38 1
a38 1
   inssort(array, linenr - 1, sizeof *array, strstrcmp);
@


1.4
log
@-
@
text
@d1 1
a1 1
// $Id: $
d12 6
@


1.3
log
@-
@
text
@d1 1
a1 1
// $ID$
@


1.2
log
@-
@
text
@d21 5
a25 13
      int scancount = scanf("%lg", &number);
      if(scancount == EOF){
         break;
      }else if(count > 0x1000){
         exit_status = EXIT_FAILURE;
         break;
      }else if(scancount ==1){
         array[count] = number;
         count++;
      }else {
         exit_status = EXIT_FAILURE;
         break;
      }   
d27 5
a31 3
   inssort(array, count, sizeof *array, intcmp);
   for(size_t index = 0; index < count; index++){
      printf("%20.15g\n", array[index]);
@


1.1
log
@-
@
text
@d17 4
a20 4
   double array[0x1000];
   size_t index = 0;
   for(;;){
      double number; 
@
