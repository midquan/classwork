head	1.7;
access;
symbols;
locks;
comment	@ * @;


1.7
date	2016.03.10.13.28.59;	author -;	state -;
branches;
next	1.6;

1.6
date	2016.03.10.12.04.29;	author -;	state -;
branches;
next	1.5;

1.5
date	2016.03.10.12.04.05;	author -;	state -;
branches;
next	1.4;

1.4
date	2016.03.10.12.03.39;	author -;	state -;
branches;
next	1.3;

1.3
date	2016.03.10.11.57.51;	author -;	state -;
branches;
next	1.2;

1.2
date	2016.03.10.11.47.42;	author -;	state -;
branches;
next	1.1;

1.1
date	2016.03.10.11.03.45;	author -;	state -;
branches;
next	;


desc
@@


1.7
log
@-
@
text
@// $Id: numsort.c,v 1.6 2016-03-10 04:04:29-08 - - $
// Michael Quan miduqan

#include <stdio.h>
#include <stdlib.h>
#include <libgen.h>
#include <string.h>

#include "inssort.h"

char *program_name = NULL;
int exit_status = EXIT_SUCCESS;

int cmpfunc (const void *this, const void *that){
   return ( *(double*)this - *(double*)that);
}

int main(int argc, char **argv){
   (void) argc;
   program_name = basename(argv[0]);

   double array[0x1000];
   size_t count = 0;
   for(;;){
      double number; 
      int scancount = scanf("%lg", &number);
      if(scancount == EOF){
         break;
      }else if(count > 0x1000){
         exit_status = EXIT_FAILURE;
         break;
      }else if(scancount ==1){
         array[count] = number;
         count++;
      }else {
         exit_status = EXIT_FAILURE;
         break;
      }   
   }
   inssort(array, count, sizeof *array, cmpfunc);
   for(size_t index = 0; index < count; index++){
      printf("%20.15g\n", array[index]);
   }

   return exit_status;
}
@


1.6
log
@-
@
text
@d1 1
a1 1
// $Id: $
d40 1
a40 1
   inssort(array, count, sizeof *array, intcmp);
@


1.5
log
@-
@
text
@d1 1
a1 1
// $ID:$
@


1.4
log
@-
@
text
@d1 1
a1 1
// $ID$
@


1.3
log
@-
@
text
@d14 1
a14 1
int cmp func (const void *this, const void *that){
@


1.2
log
@-
@
text
@d14 3
@


1.1
log
@-
@
text
@d6 2
d20 1
a20 1
   size_t index = 0;
@
