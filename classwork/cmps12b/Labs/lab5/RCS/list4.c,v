head	1.9;
access;
symbols;
locks;
comment	@ * @;


1.9
date	2016.02.11.03.52.23;	author -;	state -;
branches;
next	1.8;

1.8
date	2016.02.11.03.51.18;	author -;	state -;
branches;
next	1.7;

1.7
date	2016.02.11.03.46.39;	author -;	state -;
branches;
next	1.6;

1.6
date	2016.02.11.03.45.12;	author -;	state -;
branches;
next	1.5;

1.5
date	2016.02.11.03.44.30;	author -;	state -;
branches;
next	1.4;

1.4
date	2016.02.11.03.39.45;	author -;	state -;
branches;
next	1.3;

1.3
date	2016.02.11.03.39.22;	author -;	state -;
branches;
next	1.2;

1.2
date	2016.02.11.03.37.23;	author -;	state -;
branches;
next	1.1;

1.1
date	2016.02.11.03.26.16;	author -;	state -;
branches;
next	;


desc
@@


1.9
log
@-
@
text
@// $Id: list4.c,v 1.8 2016-02-10 19:51:18-08 - - $
// Michael Quan midquan
#include <assert.h>
#include <stdio.h>
#include <stdlib.h>
typedef struct node node;
struct node {
   char *word;
   node *link;
};

int main (int argc, char **argv) {
   node *head = NULL;
   for (int argi = 0; argi < 5; ++argi) {
      node *node = malloc (sizeof (struct node));
      assert (node != NULL);
      node->word = argv[argi];
      node->link = head;
      head = node;
   }
   for (node *curr = head; curr->link != NULL; curr = curr->link) {
      printf ("%p->node {word=%p->[%s], link=%p}\n",
              curr, curr->word, curr->word, curr->link);
   }
   while (head){
      node *node = head;
      head = head->link;
      free(node);
   }

   free(head);
   return EXIT_SUCCESS;
}
@


1.8
log
@-
@
text
@d1 1
a1 1
// $Id: list4.c,v 1.7 2016/02/11 03:46:39 - - $
d25 1
a25 1
   while (head != NULL){
@


1.7
log
@-
@
text
@d1 1
a1 1
// $Id: list4.c,v 1.6 2016-02-10 19:45:12-08 - - $
d26 1
a26 1
      node* node = head;
@


1.6
log
@-
@
text
@d1 1
a1 1
// $Id: list4.c,v 1.5 2016-02-10 19:44:30-08 - - $
d25 1
a25 1
   while (head){
@


1.5
log
@-
@
text
@d1 1
a1 1
// $Id: list4.c,v 1.4 2016-02-10 19:39:45-08 - - $
d26 1
a26 1
      node * node = head;
@


1.4
log
@-
@
text
@d1 1
a1 1
// $Id: list4.c,v 1.3 2016-02-10 19:39:22-08 - - $
d25 4
a28 5
   for (int argi = 0; argi < 5; ++argi){
      free (*node);
      free (node-> word);
      free (node-> link);
      free (head);
d30 2
@


1.3
log
@-
@
text
@d1 1
a1 1
// $Id: list4.c,v 1.2 2016-02-10 19:37:23-08 - - $
d26 1
a26 1
      free (node *node);
@


1.2
log
@-
@
text
@d1 1
a1 1
// $Id: list4.c,v 1.1 2016-02-10 19:26:16-08 - - $
d29 1
@


1.1
log
@-
@
text
@d1 1
a1 1
// $Id: list3.c,v 1.2 2016-02-10 19:20:52-08 - - $
d25 6
a30 1
   return 9;
@
